import { error } from "console";
import { StatusCodes } from "http-status-codes";
import {
  ACCESS_TOKEN_SECRET_SIGNATURE,
  JwtProvider,
} from "~/providers/JwtProvider";

// Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: l·∫•y v√† x√°c th·ª±c JWT accessToken nh·∫≠n ƒëc t·ª´ FE c√≥ h·ª£p l·ªá hay kh
const isAuthorized = async (req, res, next) => {
  //c√°ch 1: l·∫•y accesstoken n·∫±m trong req cookies ph√≠a client - withCredentials trong file authorizeAxios v√† credentials trong CORS
  // const accessTokenFromCookie = req.cookies?.accessToken;
  // // console.log("accessTokenFromCookie: ", accessTokenFromCookie);
  // if (!accessTokenFromCookie) {
  //   res
  //     .status(StatusCodes.UNAUTHORIZED)
  //     .json({ message: "Unauthorized! (token not found)" });
  //   return;
  // }

  //c√°ch 2: l·∫•y accesstoken trong tr∆∞·ªùng h·ª£p FE l∆∞u localStorage v√† g·ª≠i l√™n th√¥ng qua header authorization
  const accessTokenFromHeader = req.headers.authorization;
  // console.log("accessTokenFromHeader: ", accessTokenFromHeader);
  if (!accessTokenFromHeader) {
    res
      .status(StatusCodes.UNAUTHORIZED)
      .json({ message: "Unauthorized! (token not found)" });
    return;
  }

  try {
    //b∆∞·ªõc 1: th·ª±c hi·ªán gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      // accessTokenFromCookie, // d√πng theo c√°ch 1
      accessTokenFromHeader.substring("Bearer ".length), // d√πng theo c√°ch 2
      ACCESS_TOKEN_SECRET_SIGNATURE
    );

    //b∆∞·ªõc 2: Quan tr·ªçng: n·∫øu token h·ª£p l·ªá, th√¨ s·∫Ω ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req.jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng c·∫ßn s·ª≠ l√≠ ·ªü ph√≠a sau
    req.jwtDecoded = accessTokenDecoded;

    //b∆∞·ªõc 3: cho ph√©p request ƒëi ti·∫øp
    next();
  } catch (error) {
    console.log("üöÄ ~ isAuthorized ~ err:", error);

    //th1: accessToken h·∫øt h·∫°n th√¨ tr·∫£ v·ªÅ m√£ l·ªói GONE - 410 cho FE ƒë·ªÉ g·ªçi api refreshToken
    if (error.message?.includes("jwt expired")) {
      res.status(StatusCodes.GONE).json({ message: "need to refresh token" });
      return;
    }
    // UNAUTHORIZED
    // GONE
    //th2: accessToken h·∫øt h·∫°n kh√¥ng do h·∫øt h·∫°n th√¨ tr·∫£ v·ªÅ m√£ l·ªói 401 cho FE x·ª≠ l√≠ logout
    res
      .status(StatusCodes.UNAUTHORIZED)
      .json({ message: "Unauthorized! Please login" });
  }
};

export const authMiddleware = {
  isAuthorized,
};
